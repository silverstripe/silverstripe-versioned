<?php

namespace SilverStripe\Versioned\GraphQL\Plugins;

use SilverStripe\Core\Extensible;
use SilverStripe\GraphQL\Schema\DataObject\DataObjectModel;
use SilverStripe\GraphQL\Schema\DataObject\Plugin\QuerySort;
use SilverStripe\GraphQL\Schema\Exception\SchemaBuilderException;
use SilverStripe\GraphQL\Schema\Field\Field;
use SilverStripe\GraphQL\Schema\Interfaces\ModelTypePlugin;
use SilverStripe\GraphQL\Schema\Interfaces\SchemaUpdater;
use SilverStripe\GraphQL\Schema\Schema;
use SilverStripe\GraphQL\Schema\Type\ModelType;
use SilverStripe\GraphQL\Schema\Type\Type;
use SilverStripe\ORM\DataObject;
use SilverStripe\Security\Member;
use SilverStripe\Versioned\GraphQL\Resolvers\VersionedResolver;
use SilverStripe\Versioned\Versioned;

if (!interface_exists(ModelTypePlugin::class)) {
    return;
}

class VersionedDataObject implements ModelTypePlugin, SchemaUpdater
{
    const IDENTIFIER = 'versioning';

    /**
     * @return string
     */
    public function getIdentifier(): string
    {
        return self::IDENTIFIER;
    }

    /**
     * @param Schema $schema
     * @throws SchemaBuilderException
     */
    public static function updateSchema(Schema $schema): void
    {
        $schema->addModel(ModelType::create(Member::class));
    }

    /**
     * @param ModelType $type
     * @param Schema $schema
     * @param array $config
     * @throws SchemaBuilderException
     */
    public function apply(ModelType $type, Schema $schema, array $config = []): void
    {
        $class = $type->getModel()->getSourceClass();
        Schema::invariant(
            is_subclass_of($class, DataObject::class),
            'The %s plugin can only be applied to types generated by %s models',
            __CLASS__,
            DataObject::class
        );

        if (!Extensible::has_extension($class, Versioned::class)) {
            return;
        }

        $versionName = $type->getModel()->getTypeName() . 'Version';
        $memberType = $schema->getModelByClassName(Member::class);
        Schema::invariant(
            $memberType,
            'The %s class was not added as a model. Should have been done in %s::%s?',
            Member::class,
            __CLASS__,
            'updateSchema'
        );
        $memberTypeName = $memberType->getModel()->getTypeName();
        $resolver = ['resolver' => [VersionedResolver::class, 'resolveVersionFields']];

        $versionType = Type::create($versionName)
            ->mergeWith($type)
            ->addField('author', ['type' => $memberTypeName] + $resolver)
            ->addField('publisher', ['type' => $memberTypeName] + $resolver)
            ->addField('published', ['type' => 'Boolean'] + $resolver)
            ->addField('liveVersion', ['type' => 'Boolean'] + $resolver)
            ->addField('latestDraftVersion', ['type' => 'Boolean'] + $resolver);

        $schema->addType($versionType);
        $type->addField('version', 'Int')
            ->addField('versions', '[' . $versionName . ']', function (Field $field) use ($type) {
                $field->setResolver([VersionedResolver::class, 'resolveVersionList'])
                    ->addResolverContext('sourceClass', $type->getModel()->getSourceClass())
                    ->addPlugin(QuerySort::IDENTIFIER, [
                        'fields' => ['Version'],
                    ]);
            });
    }
}
